# This is a basic workflow to help you get started with Actions

name: CI_Windows

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a set of commands using the runners shell
    - name: download dependency
      run: |
        git branch -a
        git submodule update --init --recursive    

    - name: build examples (no-dependency)
      run: |
        echo "###############################"
        echo "## build examples no-dependency
        cd examples
        mkdir buildVS64Static
        cd buildVS64Static
        cmake -A x64 ..
        cmake --build .
        cd ../../

    - name: running test_cpp
      run: |
        echo "###################"
        echo "## build googletest"
        cd 3rd_party/googletest
        mkdir buildVS64
        cd buildVS64
        cmake -A x64 -Dgtest_force_shared_crt=ON ..
        cmake --build . --config Release
        cd ../../..

        echo "#############################"
        echo "## build test hdronly and run"
        cd test_cpp
        mkdir buildVS64Hdronly
        cd buildVS64Hdronly
        cmake -A x64 -DUSE_HEADERONLY=ON ..
        cmake --build . --config Release
        ./Release/runUnitTests.exe 
        cd ../../

        echo "############################"
        echo "## build test static" 
        cd test_cpp        
        mkdir buildVS64Static
        cd buildVS64Static
        cmake -A x64 -DUSE_HEADERONLY=OFF ..
        cd ../../

    - name: build glfw
      run: |
        echo "################################"
        echo "## build glfw"
        cd 3rd_party/glfw
        cmake . -A x64
        cmake --build . --config Release
        cd ../..

    - name: build tinygltf
      run: |
        echo "######################"
        echo "## build tinygltf demo"
        cd examples_oldgl_glfw_tinygltf
        mkdir buildVS64Static
        cd buildVS64Static
        cmake -A x64 -DUSE_HEADERONLY=ON ..
        cmake --build .
        cd ../../

    - name: build thread
      run: |
        echo "######################"
        echo "## build thread demo"
        cd examples_oldgl_glfw_thread
        mkdir buildVS64Static
        cd buildVS64Static
        cmake -A x64 -DUSE_HEADERONLY=ON ..
        cmake --build .
        cd ../../        

    - name: build zlib
      run: |
        echo "##############################"
        echo "## build zlib"
        cd 3rd_party
        git clone https://github.com/madler/zlib.git
        cd zlib
        mkdir buildMake
        cd buildMake
        cmake -A x64 ..
        cmake --build . --config Release
        cd ../../../  

    - name: build examples_oldgl_glfw_cnpy
      run: |
        echo "##############################"
        echo "## examples_oldgl_glfw_cnpy"
        $zlib_library=Convert-Path 3rd_party\zlib\buildMake\Release\zlib.lib
        echo $zlib_library
        cd examples_oldgl_glfw_cnpy
        mkdir buildVS64Hdronly
        cd buildVS64Hdronly
        cmake -A x64 -DUSE_HEADERONLY=ON -DZLIB_LIBRARY="$zlib_library" -DZLIB_INCLUDE_DIR="..\..\3rd_party\zlib;..\..\3rd_party\zlib\buildMake" ..
        cmake --build . --config Release
        cd ../../
