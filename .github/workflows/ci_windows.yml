# This is a basic workflow to help you get started with Actions

name: CI_Windows

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a set of commands using the runners shell
    - name: build googletest
      run: |
        echo "###################"
        echo "## build googletest"

        git submodule update --init -- 3rd_party/googletest
        cd 3rd_party/googletest
        mkdir buildVS64
        cd buildVS64
        cmake -A x64 -Dgtest_force_shared_crt=ON ..
        cmake --build . --config Release
        cmake --install . --prefix ../../libgtest
        cd ../../..

    - name: build & run test_cpp    
      run: |
        echo "#############################"
        echo "## build test hdronly and run"

        git submodule update --init -- 3rd_party/tinygltf

        cd test_cpp
        mkdir buildVS64Hdronly
        cd buildVS64Hdronly
        cmake .. -A x64 `
          -DDFM2_HEADER_ONLY=ON
        cmake --build . --config Release
        ./Release/runUnitTests.exe 
        cd ../../

        echo "############################"
        echo "## build test static" 

        cd test_cpp        
        mkdir buildVS64Static
        cd buildVS64Static
        cmake .. -A x64 `
          -DDFM2_HEADER_ONLY=OFF
        cd ../../

    - name: build glfw
      run: |
        echo "################################"
        echo "## build glfw"

        git submodule update --init -- 3rd_party/glfw

        cd 3rd_party/glfw
        cmake . -A x64
        cmake --build . --config Release
        cmake --install . --prefix ../libglfw
        cd ../..

    - name: build examples (oldgl,glfw)
      run: |
        echo "#############################"
        echo "## build demo oldgl,glfw,glad"

        cd examples_oldgl_glfw
        mkdir buildVS64Static
        cd buildVS64Static
        cmake .. -A x64
        cmake --build .
        cd ../../

    - name: build examples (glfw,glad)
      run: |
        echo "#######################"
        echo "## build demo glfw,glad"

        cd examples_oldgl_glfw_glad
        mkdir buildVS64Static
        cd buildVS64Static
        cmake .. -A x64
        cmake --build .
        cd ../../

    - name: build examples (glfw,tinygltf)
      run: |
        echo "###########################"
        echo "## build demo glfw,tinygltf"

        git submodule update --init -- 3rd_party/tinygltf

        cd examples_oldgl_glfw_tinygltf
        mkdir buildVS64Static
        cd buildVS64Static
        cmake .. -A x64
        cmake --build .
        cd ../../

    - name: build examples (thread)
      run: |
        echo "#########################"
        echo "## build demo glfw,thread"

        cd examples_oldgl_glfw_thread
        mkdir buildVS64Static
        cd buildVS64Static
        cmake .. -A x64
        cmake --build .
        cd ../../   

    - name: build zlib
      run: |
        echo "##############################"
        echo "## build zlib"

        git submodule update --init -- 3rd_party/zlib
        cd 3rd_party/zlib
        mkdir buildMake
        cd buildMake
        cmake .. -A x64
        cmake --build . --config Release
        cp zconf.h ..
        cmake --install .
        cd ../../../  

    - name: build examples (glfw,cnpy)
      run: |
        echo "#######################"
        echo "## build demo glfw,cnpy"

        $zlib_library=Convert-Path 3rd_party\zlib\buildMake\Release\zlib.lib
        $zlib_include_dir=Convert-Path 3rd_party\zlib
        echo "zlib_library: $zlib_library"
        echo "zlib_include_dir: $zlib_include_dir"

        git submodule update --init -- 3rd_party/cnpy

        cd examples_oldgl_glfw_cnpy
        mkdir buildVS64Hdronly
        cd buildVS64Hdronly
        cmake .. -A x64 `
          -DZLIB_LIBRARY="$zlib_library" `
          -DZLIB_INCLUDE_DIR="$zlib_include_dir"
        cmake --build . --config Release
        cd ../../

    - name: build OpenEXR
      run: |
        echo "##############################""
        echo "## build OpenEXR"

        $zlib_library=Convert-Path 3rd_party\zlib\buildMake\Release\zlib.lib
        $zlib_root=Convert-Path 3rd_party\zlib
        echo "zlib_library: $zlib_library"
        echo "zlib_root: $zlib_root"

        cd 3rd_party
        curl -L https://github.com/AcademySoftwareFoundation/openexr/archive/v2.5.2.zip -o openexr.zip
        7z x openexr.zip -y
        cd openexr-2.5.2
        cmake . -A x64 `
          -DZLIB_ROOT="$zlib_root" `
          -DZLIB_LIBRARY="$zlib_library" `
          -DPYILMBASE_ENABLE=OFF `
          -DBUILD_TESTING=OFF
        cmake --build . --config Release
        cd ..
        cd openexr-2.5.2
        $openexr_root=Convert-Path ../libopenexr
        echo "openexr_root: $openexr_root"
        cmake --install . --prefix "$openexr_root"
        cd ../../

    - name: build alembic 
      run: |
        echo "###############################"
        echo "## build alembic"

        $openexr_root=Convert-Path 3rd_party/libopenexr
        echo "openexr_root: $openexr_root"

        git submodule update --init -- 3rd_party/alembic        
        cd 3rd_party/alembic
        cmake . `
            -DUSE_TESTS=OFF `
            -DALEMBIC_SHARED_LIBS=OFF `
            -DILMBASE_ROOT="$openexr_root"
        cmake --build . --config Release
        cd ..
        cd alembic
        $alembic_root=Convert-Path ../libalembic
        echo "alembic_root: $alembic_root" 
        cmake --install . --prefix "$alembic_root"
        cd ../..

    - name: build examples (alembic)
      run: |
        echo "###############################"
        echo "## build examples alembic"

        $openexr_root=Convert-Path 3rd_party/libopenexr
        echo "openexr_root: $openexr_root"

        cd examples_alembic
        mkdir buildVS64Static
        cd buildVS64Static
        cmake -A x64 .. -DILMBASE_ROOT="$openexr_root"
        cmake --build . --config Release
        cd ../..

    - name: build eigen
      run: |
        echo "##############################"
        echo "## build eigen"

        git submodule update --init -- 3rd_party/eigen
        cd 3rd_party/eigen
        mkdir build
        cd build
        cmake ..
        cmake --install . --prefix ../../libeigen


    - name: build & run test_eigen
      run: |
        echo "###################################"
        echo "## build test_eigen hdronly and run"

        cd test_eigen
        mkdir buildVS64Hdronly
        cd buildVS64Hdronly
        cmake .. -A x64 `
          -DDFM2_HEADER_ONLY=ON -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release
        ./Release/runUnitTests.exe 
        cd ../../