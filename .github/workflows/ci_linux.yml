# This is a basic workflow to help you get started with Actions

name: CI_Linux

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: checkout repository
      uses: actions/checkout@v2   

    - name: download_dependencies
      run: |
        git submodule update --init --recursive       

    - name: build_examples (alembic)
      run: |
        echo ########################################
        echo ## build examples alembic
        
        git submodule update --init -- 3rd_party/Imath
        cd 3rd_party/Imath || exit
        git checkout master
        git pull origin master
        mkdir build
        cd build || exit
        cmake .. -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTING=OFF
        cmake --build .
        cmake --install . --prefix ../../Imathlib
        cd ../../../

        Imath_dir=$(pwd)/3rd_parth/Imathlib
        echo "Imath_dir: ${Imath_dir}"

        git submodule update --init -- 3rd_party/alembic
        cd 3rd_party/alembic
        git checkout master
        git pull origin master
        mkdir build
        cd build || exit
        cmake .. -DUSE_TESTS=OFF -DALEMBIC_SHARED_LIBS=OFF -DCMAKE_PREFIX_PATH="${Imath_dir}" -DImath_DIR=${Imath_dir}
        cmake --build . 
        cmake --install . --prefix=../../alembiclib
        cd ../../../

        cd examples_alembic
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake ..
        make
        cd ../.. 

    - name: install_gtest
      run: |
        echo "###########################"
        echo "## fetch & build googletest"

        git submodule update --init -- 3rd_party/googletest

        cd 3rd_party/googletest
        cmake .
        cmake --build .
        cmake --install . --prefix ../libgtest
        cd ../../        

    - name: test_cpp
      run: |
        echo "############################"
        echo "## build delfem2 test static"

        cd test_cpp
        mkdir buildMakeStatic && cd buildMakeStatic
        cmake .. -DUSE_STATIC_LIB=ON
        cmake --build .
        ./runUnitTests
        cd ../../

        echo "#####################################"
        echo "## build delfem2 test hdronly and run" 
        
        cd test_cpp
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake .. -DUSE_STATIC_LIB=OFF
        cmake --build .
        ./runUnitTests
        cd ../../    

    - name: test_eigen
      run: |
        echo "#####################################"
        echo "## build delfem2 test hdronly and run"
        
        cd test_eigen
        mkdir buildMakeStatic && cd buildMakeStatic
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build .
        ./runUnitTests
        cd ../../ 

    - name: build_glfw
      run: |
        echo "#####################"
        echo "## fetch & build glfw" 
        sudo apt-get update
        sudo apt-get install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        sudo apt-get install libxmu-dev xorg-dev
        sudo apt-get install libglfw3-dev 
        sudo apt-get install libopenal-dev
        sudo apt-get install libgl1-mesa-dev

        git submodule update --init -- 3rd_party/glfw
        cd 3rd_party/glfw
        cmake .
        cmake --build . 
        mkdir ../libglfw
        cmake --install . --prefix ../libglfw
        cd ../..

    - name: build examples (oldgl,glfw)
      run: |
        echo ###########################
        echo ## build demo: oldgl,glfw

        cd examples_oldgl_glfw
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake .. -DUSE_STATIC_LIB=OFF
        cmake --build .
        cd ../..

        cd examples_oldgl_glfw
        mkdir buildMakeStatic && cd buildMakeStatic
        cmake .. -DUSE_STATIC_LIB=ON
        cmake --build .
        cd ../..

    - name: build examples (oldgl,glfw,glad)
      run: |
        echo ##############################
        echo ## build demo: oldgl,glfw,glad

        cd examples_oldgl_glfw_glad
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake .. 
        cmake --build .
        cd ../..

    - name: build examples (glfw modern opengl)
      run: |
        echo ########################################
        echo ## build C++ glfw modern Opengl examples

        cd examples_newgl_glfw
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake .. -DUSE_STATIC_LIB=OFF
        cmake --build .
        cd ../..

        cd examples_newgl_glfw
        mkdir buildMakeStatic && cd buildMakeStatic
        cmake .. -DUSE_STATIC_LIB=ON
        cmake --build .
        cd ../..

    - name: build examples (glut)
      run: |
        echo ##########################
        echo ## build c++ glut examples

        sudo apt-get install freeglut3-dev 

        cd examples_oldgl_glut
        mkdir buildMake && cd buildMake
        cmake ..
        make
        cd ../..

    - name: build examples (glfw, tinygltf)
      run: |
        echo ########################
        echo ## build tinygl examples

        git submodule update --init -- 3rd_party/tinygltf

        cd examples_oldgl_glfw_tinygltf
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake .. 
        make
        cd ../../

    - name: build examples (glfw,ã€€thread)
      run: |
        echo ########################
        echo ## build thread examples

        cd examples_oldgl_glfw_thread
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake ..
        cmake --build .
        cd ../../

    - name: build examples (glfw, imgui)
      run: |
        echo ########################
        echo ## build imgui examples

        git submodule update --init -- 3rd_party/imgui

        cd examples_newgl_glfw_imgui
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake ..
        cmake --build .
        cd ../../

    - name: GitHub dispatch event
      env: 
        MY_GITHUB_TOKEN: ${{ secrets.TOKEN0 }}
      run: |
        curl --request POST 'https://api.github.com/repos/nobuyuki83/delfem2-python-bindings/dispatches' \
        --header 'Authorization: Bearer ${{env.MY_GITHUB_TOKEN}}' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "event_type": "updated-delfem2"
        }'
